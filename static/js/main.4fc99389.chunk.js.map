{"version":3,"sources":["components/ColorContainer/ColorContainer.jsx","components/Form/Form.jsx","App.js","index.js"],"names":["ColorContainer","color","id","onChange","checked","className","type","htmlFor","Form","handleSubmit","colorArray","handleChange","onSubmit","map","getRandom","Math","floor","random","amount","i","push","nanoid","length","createColors","App","useState","colors","setColors","event","preventDefault","filter","item","some","alert","chackedColors","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAYeA,EAVQ,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAE3C,OACI,qBAAIC,UAAU,qBAAd,UACI,uBAAOC,KAAK,WAAWD,UAAU,WAAWH,GAAIA,EAAIC,SAAUA,EAAUC,QAASA,IACjF,uBAAOC,UAAWJ,EAAOM,QAASL,QCS/BM,EAdF,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAEtC,OACI,uBAAMC,SAAUH,EAAhB,UACI,6BACKC,EAAWG,KAAI,YAA0B,IAAxBZ,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,GAAIE,EAAa,EAAbA,QACxB,OAAQ,cAAC,EAAD,CAAgBH,MAAOA,EAAgBC,GAAIA,EAAIC,SAAUQ,EAAcP,QAASA,EAASO,aAAcA,GAApET,QAGnD,wBAAQI,KAAK,SAAb,wBCHNQ,G,MAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GAE9CP,EAAa,IAEI,SAACQ,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IAC1BT,EAAWU,KAAK,CAAEnB,MAAO,OAAQC,GAAImB,cAAUjB,SAAS,IAE1D,IAAK,IAAIe,EAAI,EAAGT,EAAWY,OAAS,EAAGH,IACrCT,EAAWU,KAAK,CAAEnB,MAAO,QAASC,GAAImB,cAAUjB,SAAS,IAI7DmB,CAAaT,GAyCEU,MAvCf,WACE,MAA4BC,mBAASf,GAArC,mBAAOgB,EAAP,KAAeC,EAAf,KA0BA,OACE,sBAAKtB,UAAU,MAAf,UACE,mPACA,cAAC,EAAD,CACEI,aAbe,SAACmB,GAGpB,OAFAA,EAAMC,iBAfiBH,EAAOI,QAAO,SAACC,GAAD,MAAyB,SAAfA,EAAK9B,SAC9B+B,MAAK,SAACD,GAAD,OAA2B,IAAjBA,EAAK3B,WAmBnC6B,MAAM,8JAFJA,MAAM,kJAUXvB,WAAYgB,EACZf,aAzBe,SAACiB,GACpB,IAAMM,EAAgBR,EAAOb,KAAI,SAACkB,GAIhC,OAHIA,EAAK7B,KAAO0B,EAAMO,OAAOjC,KAC3B6B,EAAK3B,SAAW2B,EAAK3B,SAEhB2B,KAETJ,EAAUO,UChCdE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4fc99389.chunk.js","sourcesContent":["import './ColorContainer.scss';\r\n\r\nconst ColorContainer = ({ color, id, onChange, checked }) => {\r\n\r\n    return (\r\n        <li className=\"checkbox-container\">\r\n            <input type=\"checkbox\" className='checkbox' id={id} onChange={onChange} checked={checked} />\r\n            <label className={color} htmlFor={id}/>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ColorContainer;","import ColorContainer from \"../ColorContainer\";\r\n\r\nconst Form = ({ handleSubmit, colorArray, handleChange }) => {\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <ul>\r\n                {colorArray.map(({color,id, checked}) => {\r\n                    return (<ColorContainer color={color} key={id} id={id} onChange={handleChange} checked={checked} handleChange={handleChange}/>)\r\n                })}\r\n            </ul>\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import { useState } from \"react\";\n\nimport { nanoid } from \"nanoid\";\n\nimport Form from \"./components/Form\";\n\nimport \"./App.scss\";\n\nconst getRandom = Math.floor(Math.random() * 3) + 1;\n\nlet colorArray = [];\n\nconst createColors = (amount) => {\n  for (let i = 0; i < amount; i++) {\n    colorArray.push({ color: \"blue\", id: nanoid(), checked: false });\n  }\n  for (let i = 0; colorArray.length < 6; i++) {\n    colorArray.push({ color: \"green\", id: nanoid(), checked: false });\n  }\n  return colorArray;\n};\ncreateColors(getRandom);\n\nfunction App() {\n  const [colors, setColors] = useState(colorArray);\n\n  const getCheckedBlue = () => {\n    const blueColorArray = colors.filter((item) => item.color === \"blue\");\n    return blueColorArray.some((item) => item.checked === false);\n  };\n\n  const handleChange = (event) => {\n    const chackedColors = colors.map((item) => {\n      if (item.id === event.target.id) {\n        item.checked = !item.checked;\n      }\n      return item;\n    });\n    setColors(chackedColors);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!getCheckedBlue()) {\n      return alert(\"Все синие квадраты выбраны\");\n    }\n    return alert(\"Не все синие квадраты выбраны\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Пожалуйста, выберите все синие квадраты</h1>\n      <Form\n        handleSubmit={handleSubmit}\n        colorArray={colors}\n        handleChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}